{"uid":"dafdc727430c277d","name":"TC04: Delete a dashboard","fullName":"test_cases.test_web.TestWebDashboard#test_delete_a_dashboard","historyId":"455a621047392daa441bcc5d27bbaf3c","time":{"start":1689020540839,"stop":1689020540872,"duration":33},"description":"Delete a dashboard from the browse dashboards page","descriptionHtml":"<p>Delete a dashboard from the browse dashboards page</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00C7A813+48355]\n\t(No symbol) [0x00C0C4B1]\n\t(No symbol) [0x00B15358]\n\t(No symbol) [0x00B6CDAD]\n\t(No symbol) [0x00B5A536]\n\t(No symbol) [0x00B382DC]\n\t(No symbol) [0x00B393DD]\n\tGetHandleVerifier [0x00EDAABD+2539405]\n\tGetHandleVerifier [0x00F1A78F+2800735]\n\tGetHandleVerifier [0x00F1456C+2775612]\n\tGetHandleVerifier [0x00D051E0+616112]\n\t(No symbol) [0x00C15F8C]\n\t(No symbol) [0x00C12328]\n\t(No symbol) [0x00C1240B]\n\t(No symbol) [0x00C04FF7]\n\tBaseThreadInitThunk [0x766B7D59+25]\n\tRtlInitializeExceptionChain [0x77A0B74B+107]\n\tRtlClearBits [0x77A0B6CF+191]","statusTrace":"self = <test_cases.test_web.TestWebDashboard object at 0x000001B887BE7790>\n\n    @allure.title(\"TC04: Delete a dashboard\")\n    @allure.description(\"Delete a dashboard from the browse dashboards page\")\n    @pytest.mark.run_this\n    def test_delete_a_dashboard(self):\n>       WebFlows.open_brows_dashboards_page()\n\ntest_web.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\workflows\\web_flows.py:156: in open_brows_dashboards_page\n    UiActions.click(page.web_side_menu_nav.get_dashboards_nav())\n..\\page_objects\\web_objects\\side_menu_nav.py:36: in get_dashboards_nav\n    return self.driver.find_element(dashboards_nav[0], dashboards_nav[1])\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:104: in find_element\n    return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:114: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B887BD7CD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"{Alert text : \"},\"error\":\"unexpected alert open\",\"message\":\"unexpe...dInitThunk [0x766B7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77A0B74B+107]\\\\n\\\\tRtlClearBits [0x77A0B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nE           Message: unexpected alert open: {Alert text : }\nE             (Session info: chrome=114.0.5735.199)\nE           Stacktrace:\nE           Backtrace:\nE           \tGetHandleVerifier [0x00C7A813+48355]\nE           \t(No symbol) [0x00C0C4B1]\nE           \t(No symbol) [0x00B15358]\nE           \t(No symbol) [0x00B6CDAD]\nE           \t(No symbol) [0x00B5A536]\nE           \t(No symbol) [0x00B382DC]\nE           \t(No symbol) [0x00B393DD]\nE           \tGetHandleVerifier [0x00EDAABD+2539405]\nE           \tGetHandleVerifier [0x00F1A78F+2800735]\nE           \tGetHandleVerifier [0x00F1456C+2775612]\nE           \tGetHandleVerifier [0x00D051E0+616112]\nE           \t(No symbol) [0x00C15F8C]\nE           \t(No symbol) [0x00C12328]\nE           \t(No symbol) [0x00C1240B]\nE           \t(No symbol) [0x00C04FF7]\nE           \tBaseThreadInitThunk [0x766B7D59+25]\nE           \tRtlInitializeExceptionChain [0x77A0B74B+107]\nE           \tRtlClearBits [0x77A0B6CF+191]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_web_driver","time":{"start":1689020517911,"stop":1689020520647,"duration":2736},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false},{"name":"_xunit_setup_method_fixture_TestWebDashboard","time":{"start":1689020540838,"stop":1689020540839,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"testStage":{"description":"Delete a dashboard from the browse dashboards page","status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00C7A813+48355]\n\t(No symbol) [0x00C0C4B1]\n\t(No symbol) [0x00B15358]\n\t(No symbol) [0x00B6CDAD]\n\t(No symbol) [0x00B5A536]\n\t(No symbol) [0x00B382DC]\n\t(No symbol) [0x00B393DD]\n\tGetHandleVerifier [0x00EDAABD+2539405]\n\tGetHandleVerifier [0x00F1A78F+2800735]\n\tGetHandleVerifier [0x00F1456C+2775612]\n\tGetHandleVerifier [0x00D051E0+616112]\n\t(No symbol) [0x00C15F8C]\n\t(No symbol) [0x00C12328]\n\t(No symbol) [0x00C1240B]\n\t(No symbol) [0x00C04FF7]\n\tBaseThreadInitThunk [0x766B7D59+25]\n\tRtlInitializeExceptionChain [0x77A0B74B+107]\n\tRtlClearBits [0x77A0B6CF+191]","statusTrace":"self = <test_cases.test_web.TestWebDashboard object at 0x000001B887BE7790>\n\n    @allure.title(\"TC04: Delete a dashboard\")\n    @allure.description(\"Delete a dashboard from the browse dashboards page\")\n    @pytest.mark.run_this\n    def test_delete_a_dashboard(self):\n>       WebFlows.open_brows_dashboards_page()\n\ntest_web.py:104: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\workflows\\web_flows.py:156: in open_brows_dashboards_page\n    UiActions.click(page.web_side_menu_nav.get_dashboards_nav())\n..\\page_objects\\web_objects\\side_menu_nav.py:36: in get_dashboards_nav\n    return self.driver.find_element(dashboards_nav[0], dashboards_nav[1])\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:104: in find_element\n    return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:114: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001B887BD7CD0>\nresponse = {'status': 500, 'value': '{\"value\":{\"data\":{\"text\":\"{Alert text : \"},\"error\":\"unexpected alert open\",\"message\":\"unexpe...dInitThunk [0x766B7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77A0B74B+107]\\\\n\\\\tRtlClearBits [0x77A0B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n>           raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\nE           selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nE           Message: unexpected alert open: {Alert text : }\nE             (Session info: chrome=114.0.5735.199)\nE           Stacktrace:\nE           Backtrace:\nE           \tGetHandleVerifier [0x00C7A813+48355]\nE           \t(No symbol) [0x00C0C4B1]\nE           \t(No symbol) [0x00B15358]\nE           \t(No symbol) [0x00B6CDAD]\nE           \t(No symbol) [0x00B5A536]\nE           \t(No symbol) [0x00B382DC]\nE           \t(No symbol) [0x00B393DD]\nE           \tGetHandleVerifier [0x00EDAABD+2539405]\nE           \tGetHandleVerifier [0x00F1A78F+2800735]\nE           \tGetHandleVerifier [0x00F1456C+2775612]\nE           \tGetHandleVerifier [0x00D051E0+616112]\nE           \t(No symbol) [0x00C15F8C]\nE           \t(No symbol) [0x00C12328]\nE           \t(No symbol) [0x00C1240B]\nE           \t(No symbol) [0x00C04FF7]\nE           \tBaseThreadInitThunk [0x766B7D59+25]\nE           \tRtlInitializeExceptionChain [0x77A0B74B+107]\nE           \tRtlClearBits [0x77A0B6CF+191]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:244: UnexpectedAlertPresentException","steps":[{"name":"Open Browse page","time":{"start":1689020540839,"stop":1689020540863,"duration":24},"status":"broken","statusMessage":"selenium.common.exceptions.UnexpectedAlertPresentException: Alert Text: {Alert text : \nMessage: unexpected alert open: {Alert text : }\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00C7A813+48355]\n\t(No symbol) [0x00C0C4B1]\n\t(No symbol) [0x00B15358]\n\t(No symbol) [0x00B6CDAD]\n\t(No symbol) [0x00B5A536]\n\t(No symbol) [0x00B382DC]\n\t(No symbol) [0x00B393DD]\n\tGetHandleVerifier [0x00EDAABD+2539405]\n\tGetHandleVerifier [0x00F1A78F+2800735]\n\tGetHandleVerifier [0x00F1456C+2775612]\n\tGetHandleVerifier [0x00D051E0+616112]\n\t(No symbol) [0x00C15F8C]\n\t(No symbol) [0x00C12328]\n\t(No symbol) [0x00C1240B]\n\t(No symbol) [0x00C04FF7]\n\tBaseThreadInitThunk [0x766B7D59+25]\n\tRtlInitializeExceptionChain [0x77A0B74B+107]\n\tRtlClearBits [0x77A0B6CF+191]\n\n","statusTrace":"  File \"C:\\Python311\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\workflows\\web_flows.py\", line 156, in open_brows_dashboards_page\n    UiActions.click(page.web_side_menu_nav.get_dashboards_nav())\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\page_objects\\web_objects\\side_menu_nav.py\", line 36, in get_dashboards_nav\n    return self.driver.find_element(dashboards_nav[0], dashboards_nav[1])\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 104, in find_element\n    return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 114, in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 831, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\BarKadosh-Cello\\PycharmProjects\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 244, in check_response\n    raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":0,"stepsCount":0,"hasContent":true}],"attachments":[{"uid":"b4490bee766b4e35","name":"32bffe90-4802-467f-98e5-d9950ac2e64e-attachment.png","source":"b4490bee766b4e35.png","type":"image/png","size":69543}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":1,"stepsCount":1,"hasContent":true},"afterStages":[{"name":"_xunit_setup_method_fixture_TestWebDashboard::0","time":{"start":1689020541202,"stop":1689020545270,"duration":4068},"status":"passed","steps":[{"name":"Go to home page flow","time":{"start":1689020544217,"stop":1689020544269,"duration":52},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":1,"hasContent":true},{"name":"init_web_driver::0","time":{"start":1689020545271,"stop":1689020547438,"duration":2167},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false}],"labels":[{"name":"tag","value":"run_this"},{"name":"tag","value":"@pytest.mark.usefixtures('init_web_driver')"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_web"},{"name":"subSuite","value":"TestWebDashboard"},{"name":"host","value":"LP-BARK-51XN8S3"},{"name":"thread","value":"18144-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_web"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["run_this","@pytest.mark.usefixtures('init_web_driver')"]},"source":"dafdc727430c277d.json","parameterValues":[]}