{"uid":"438b2dcd94f7aa1d","name":"Test01: Login to grafana via DB","fullName":"test_cases.test_web_db.TestWebDB#test_verify_login_db","historyId":"f6507f6075cf19d536a0c321de8a35f5","time":{"start":1683324885826,"stop":1683324885826,"duration":0},"description":"This test verify login using elements taking from DB","descriptionHtml":"<p>This test verify login using elements taking from DB</p>\n","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00A2DCE3+50899]\n\t(No symbol) [0x009BE111]\n\t(No symbol) [0x008C5588]\n\t(No symbol) [0x008C1D87]\n\t(No symbol) [0x008B8B45]\n\t(No symbol) [0x008B9B1A]\n\t(No symbol) [0x008B8E20]\n\t(No symbol) [0x008B8275]\n\t(No symbol) [0x008B820C]\n\t(No symbol) [0x008B6F06]\n\t(No symbol) [0x008B7668]\n\t(No symbol) [0x008C6D22]\n\t(No symbol) [0x0091E631]\n\t(No symbol) [0x0090B8FC]\n\t(No symbol) [0x0091E01C]\n\t(No symbol) [0x0090B6F6]\n\t(No symbol) [0x008E7708]\n\t(No symbol) [0x008E886D]\n\tGetHandleVerifier [0x00C93EAE+2566302]\n\tGetHandleVerifier [0x00CC92B1+2784417]\n\tGetHandleVerifier [0x00CC327C+2759788]\n\tGetHandleVerifier [0x00AC5740+672048]\n\t(No symbol) [0x009C8872]\n\t(No symbol) [0x009C41C8]\n\t(No symbol) [0x009C42AB]\n\t(No symbol) [0x009B71B7]\n\tBaseThreadInitThunk [0x763F0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]","statusTrace":"request = <SubRequest 'init_web_driver' for <Function test_verify_login_db>>\n\n    @pytest.fixture(scope=\"class\")\n    def init_web_driver(request):\n        #process = subprocess.Popen(get_data('GrafanaPath'))       # Starting Grafana server without jenkins\n        time.sleep(4)\n        if get_data(\"ExecuteApplitools\").lower() == 'yes':\n            globals()['driver'] = get_web_driver()\n        else:\n            edriver = get_web_driver()\n            globals()['driver'] = EventFiringWebDriver(edriver, EventListener())\n        driver = globals()['driver']\n        driver.maximize_window()\n        driver.implicitly_wait(int(get_data('WaitTime')))\n>       driver.get(get_data('Url'))\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:81: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url,))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:114: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C8ED49B710>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00A2DCE3+50899]\nE       \t(No symbol) [0x009BE111]\nE       \t(No symbol) [0x008C5588]\nE       \t(No symbol) [0x008C1D87]\nE       \t(No symbol) [0x008B8B45]\nE       \t(No symbol) [0x008B9B1A]\nE       \t(No symbol) [0x008B8E20]\nE       \t(No symbol) [0x008B8275]\nE       \t(No symbol) [0x008B820C]\nE       \t(No symbol) [0x008B6F06]\nE       \t(No symbol) [0x008B7668]\nE       \t(No symbol) [0x008C6D22]\nE       \t(No symbol) [0x0091E631]\nE       \t(No symbol) [0x0090B8FC]\nE       \t(No symbol) [0x0091E01C]\nE       \t(No symbol) [0x0090B6F6]\nE       \t(No symbol) [0x008E7708]\nE       \t(No symbol) [0x008E886D]\nE       \tGetHandleVerifier [0x00C93EAE+2566302]\nE       \tGetHandleVerifier [0x00CC92B1+2784417]\nE       \tGetHandleVerifier [0x00CC327C+2759788]\nE       \tGetHandleVerifier [0x00AC5740+672048]\nE       \t(No symbol) [0x009C8872]\nE       \t(No symbol) [0x009C41C8]\nE       \t(No symbol) [0x009C42AB]\nE       \t(No symbol) [0x009B71B7]\nE       \tBaseThreadInitThunk [0x763F0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"init_web_driver","time":{"start":1683324885827,"stop":1683324897851,"duration":12024},"status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00A2DCE3+50899]\n\t(No symbol) [0x009BE111]\n\t(No symbol) [0x008C5588]\n\t(No symbol) [0x008C1D87]\n\t(No symbol) [0x008B8B45]\n\t(No symbol) [0x008B9B1A]\n\t(No symbol) [0x008B8E20]\n\t(No symbol) [0x008B8275]\n\t(No symbol) [0x008B820C]\n\t(No symbol) [0x008B6F06]\n\t(No symbol) [0x008B7668]\n\t(No symbol) [0x008C6D22]\n\t(No symbol) [0x0091E631]\n\t(No symbol) [0x0090B8FC]\n\t(No symbol) [0x0091E01C]\n\t(No symbol) [0x0090B6F6]\n\t(No symbol) [0x008E7708]\n\t(No symbol) [0x008E886D]\n\tGetHandleVerifier [0x00C93EAE+2566302]\n\tGetHandleVerifier [0x00CC92B1+2784417]\n\tGetHandleVerifier [0x00CC327C+2759788]\n\tGetHandleVerifier [0x00AC5740+672048]\n\t(No symbol) [0x009C8872]\n\t(No symbol) [0x009C41C8]\n\t(No symbol) [0x009C42AB]\n\t(No symbol) [0x009B71B7]\n\tBaseThreadInitThunk [0x763F0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]\n\n","statusTrace":"  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\pluggy\\_callers.py\", line 39, in _multicall\n    res = hook_impl.function(*args)\n          ^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 1129, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\_pytest\\fixtures.py\", line 901, in call_fixture_func\n    fixture_result = next(generator)\n                     ^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\test_cases\\conftest.py\", line 56, in init_web_driver\n    driver.get(get_data('Url'))\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 81, in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url,))\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 114, in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 449, in get\n    self.execute(Command.GET, {\"url\": url})\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":0,"shouldDisplayMessage":true}],"testStage":{"description":"This test verify login using elements taking from DB","status":"broken","statusMessage":"selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\n  (Session info: chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00A2DCE3+50899]\n\t(No symbol) [0x009BE111]\n\t(No symbol) [0x008C5588]\n\t(No symbol) [0x008C1D87]\n\t(No symbol) [0x008B8B45]\n\t(No symbol) [0x008B9B1A]\n\t(No symbol) [0x008B8E20]\n\t(No symbol) [0x008B8275]\n\t(No symbol) [0x008B820C]\n\t(No symbol) [0x008B6F06]\n\t(No symbol) [0x008B7668]\n\t(No symbol) [0x008C6D22]\n\t(No symbol) [0x0091E631]\n\t(No symbol) [0x0090B8FC]\n\t(No symbol) [0x0091E01C]\n\t(No symbol) [0x0090B6F6]\n\t(No symbol) [0x008E7708]\n\t(No symbol) [0x008E886D]\n\tGetHandleVerifier [0x00C93EAE+2566302]\n\tGetHandleVerifier [0x00CC92B1+2784417]\n\tGetHandleVerifier [0x00CC327C+2759788]\n\tGetHandleVerifier [0x00AC5740+672048]\n\t(No symbol) [0x009C8872]\n\t(No symbol) [0x009C41C8]\n\t(No symbol) [0x009C42AB]\n\t(No symbol) [0x009B71B7]\n\tBaseThreadInitThunk [0x763F0099+25]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]","statusTrace":"request = <SubRequest 'init_web_driver' for <Function test_verify_login_db>>\n\n    @pytest.fixture(scope=\"class\")\n    def init_web_driver(request):\n        #process = subprocess.Popen(get_data('GrafanaPath'))       # Starting Grafana server without jenkins\n        time.sleep(4)\n        if get_data(\"ExecuteApplitools\").lower() == 'yes':\n            globals()['driver'] = get_web_driver()\n        else:\n            edriver = get_web_driver()\n            globals()['driver'] = EventFiringWebDriver(edriver, EventListener())\n        driver = globals()['driver']\n        driver.maximize_window()\n        driver.implicitly_wait(int(get_data('WaitTime')))\n>       driver.get(get_data('Url'))\n\nconftest.py:56: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:81: in get\n    self._dispatch(\"navigate_to\", (url, self._driver), \"get\", (url,))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:114: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002C8ED49B710>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: net::ERR_CONNECTION_REFUSED\\\\n  ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: net::ERR_CONNECTION_REFUSED\nE         (Session info: chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00A2DCE3+50899]\nE       \t(No symbol) [0x009BE111]\nE       \t(No symbol) [0x008C5588]\nE       \t(No symbol) [0x008C1D87]\nE       \t(No symbol) [0x008B8B45]\nE       \t(No symbol) [0x008B9B1A]\nE       \t(No symbol) [0x008B8E20]\nE       \t(No symbol) [0x008B8275]\nE       \t(No symbol) [0x008B820C]\nE       \t(No symbol) [0x008B6F06]\nE       \t(No symbol) [0x008B7668]\nE       \t(No symbol) [0x008C6D22]\nE       \t(No symbol) [0x0091E631]\nE       \t(No symbol) [0x0090B8FC]\nE       \t(No symbol) [0x0091E01C]\nE       \t(No symbol) [0x0090B6F6]\nE       \t(No symbol) [0x008E7708]\nE       \t(No symbol) [0x008E886D]\nE       \tGetHandleVerifier [0x00C93EAE+2566302]\nE       \tGetHandleVerifier [0x00CC92B1+2784417]\nE       \tGetHandleVerifier [0x00CC327C+2759788]\nE       \tGetHandleVerifier [0x00AC5740+672048]\nE       \t(No symbol) [0x009C8872]\nE       \t(No symbol) [0x009C41C8]\nE       \t(No symbol) [0x009C42AB]\nE       \t(No symbol) [0x009B71B7]\nE       \tBaseThreadInitThunk [0x763F0099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x776F7B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x776F7B3E+238]\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException","steps":[],"attachments":[{"uid":"8d205af7f25be79e","name":"426a22cc-b6b5-4fd8-8121-03c86cf64c52-attachment.png","source":"8d205af7f25be79e.png","type":"image/png","size":22667}],"parameters":[],"stepsCount":0,"hasContent":true,"attachmentsCount":1,"shouldDisplayMessage":true},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.usefixtures('init_web_driver', 'init_db_connector')"},{"name":"parentSuite","value":"test_cases"},{"name":"suite","value":"test_web_db"},{"name":"subSuite","value":"TestWebDB"},{"name":"host","value":"DESKTOP-TNCSURL"},{"name":"thread","value":"59408-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_cases.test_web_db"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.usefixtures('init_web_driver', 'init_db_connector')"]},"source":"438b2dcd94f7aa1d.json","parameterValues":[]}