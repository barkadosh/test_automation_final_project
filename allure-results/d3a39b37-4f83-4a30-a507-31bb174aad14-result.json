{"name": "TC05: View only done tasks", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@class='toggleVisibilityPanel_hNPyc']\"}\n  (Session info: chrome=83.0.4103.122)\n  (Driver info: chromedriver=2.36 (7ea271f92018b1eeb8e70ec6de8c29f9758a0c05),platform=Windows NT 10.0.19045 x86_64)", "trace": "self = <test_cases.test_electron.TestElectron object at 0x00000111091D5550>\n\n    @allure.title(\"TC05: View only done tasks\")\n    @allure.description(\"Mark task as completed and filter the list to display only done tasks\")\n    @pytest.mark.run_this\n    def test_filter_to_completed_tasks(self):\n        ElectronFlows.click_task_checkbox(0)\n        ElectronFlows.click_task_checkbox(1)\n        ElectronFlows.filter_tasks_completed()\n        Verifications.verify_equals(ElectronFlows.get_number_of_task_flow(), 2)\n        save_screenshot()\n>       ElectronFlows.filter_tasks_completed()\n\ntest_electron.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\workflows\\electron_flows.py:38: in filter_tasks_completed\n    UiActions.click(page.electron_task.get_visibility_panel())\n..\\page_objects\\electron_objects\\task_page.py:39: in get_visibility_panel\n    return self.driver.find_element(visibility_panel[0], visibility_panel[1])\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:101: in find_element\n    return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:160: in _dispatch\n    raise e\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py:157: in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:976: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:321: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001110919AA10>\nresponse = {'sessionId': 'b2ab46eae78eaeb0ade8f35cfb8f2e31', 'status': 7, 'value': {'message': 'no such element: Unable to locate...n  (Driver info: chromedriver=2.36 (7ea271f92018b1eeb8e70ec6de8c29f9758a0c05),platform=Windows NT 10.0.19045 x86_64)'}}\n\n    def check_response(self, response):\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if status is None or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, basestring):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if status is None:\n                        status = value[\"status\"]\n                        message = value[\"value\"]\n                        if not isinstance(message, basestring):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class = ErrorInResponseException\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if value == '' or value is None:\n            value = response['value']\n        if isinstance(value, basestring):\n            if exception_class == ErrorInResponseException:\n                raise exception_class(response, value)\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        if 'stackTrace' in value and value['stackTrace']:\n            stacktrace = []\n            try:\n                for frame in value['stackTrace']:\n                    line = self._value_or_default(frame, 'lineNumber', '')\n                    file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                    if line:\n                        file = \"%s:%s\" % (file, line)\n                    meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                    if 'className' in frame:\n                        meth = \"%s.%s\" % (frame['className'], meth)\n                    msg = \"    at %s (%s)\"\n                    msg = msg % (meth, file)\n                    stacktrace.append(msg)\n            except TypeError:\n                pass\n        if exception_class == ErrorInResponseException:\n            raise exception_class(response, message)\n        elif exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@class='toggleVisibilityPanel_hNPyc']\"}\nE         (Session info: chrome=83.0.4103.122)\nE         (Driver info: chromedriver=2.36 (7ea271f92018b1eeb8e70ec6de8c29f9758a0c05),platform=Windows NT 10.0.19045 x86_64)\n\n..\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:242: NoSuchElementException"}, "description": "Mark task as completed and filter the list to display only done tasks", "steps": [{"name": "Click on the first task complete checkbox", "status": "passed", "steps": [{"name": "Click on element", "status": "passed", "parameters": [{"name": "elem", "value": "<selenium.webdriver.support.event_firing_webdriver.EventFiringWebElement object at 0x00000111091FE690>"}], "start": 1708797743150, "stop": 1708797743201}], "parameters": [{"name": "i", "value": "0"}], "start": 1708797743141, "stop": 1708797743201}, {"name": "Click on the first task complete checkbox", "status": "passed", "steps": [{"name": "Click on element", "status": "passed", "parameters": [{"name": "elem", "value": "<selenium.webdriver.support.event_firing_webdriver.EventFiringWebElement object at 0x000001110920B550>"}], "start": 1708797743206, "stop": 1708797743267}], "parameters": [{"name": "i", "value": "1"}], "start": 1708797743201, "stop": 1708797743267}, {"name": "Click on completed tasks filter", "status": "passed", "steps": [{"name": "Click on element", "status": "passed", "parameters": [{"name": "elem", "value": "<selenium.webdriver.support.event_firing_webdriver.EventFiringWebElement object at 0x000001110920BA10>"}], "start": 1708797743276, "stop": 1708797743327}, {"name": "Click on element", "status": "passed", "parameters": [{"name": "elem", "value": "<selenium.webdriver.support.event_firing_webdriver.EventFiringWebElement object at 0x0000011109218090>"}], "start": 1708797746336, "stop": 1708797746387}], "start": 1708797743267, "stop": 1708797746387}, {"name": "Get the number of tasks flow", "status": "passed", "start": 1708797746387, "stop": 1708797746394}, {"name": "Verify list of actual elements is equal to expected elements", "status": "passed", "parameters": [{"name": "actual", "value": "2"}, {"name": "expected", "value": "2"}], "start": 1708797746394, "stop": 1708797746394}, {"name": "Click on completed tasks filter", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {\"method\":\"xpath\",\"selector\":\"//*[@class='toggleVisibilityPanel_hNPyc']\"}\n  (Session info: chrome=83.0.4103.122)\n  (Driver info: chromedriver=2.36 (7ea271f92018b1eeb8e70ec6de8c29f9758a0c05),platform=Windows NT 10.0.19045 x86_64)\n\n", "trace": "  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n           ^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\workflows\\electron_flows.py\", line 38, in filter_tasks_completed\n    UiActions.click(page.electron_task.get_visibility_panel())\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\page_objects\\electron_objects\\task_page.py\", line 39, in get_visibility_panel\n    return self.driver.find_element(visibility_panel[0], visibility_panel[1])\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 101, in find_element\n    return self._dispatch(\"find\", (by, value, self._driver), \"find_element\", (by, value))\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 160, in _dispatch\n    raise e\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\support\\event_firing_webdriver.py\", line 157, in _dispatch\n    result = getattr(self._driver, d_call)(*d_args)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 976, in find_element\n    return self.execute(Command.FIND_ELEMENT, {\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 321, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Automation\\test_automation_final_project\\venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 242, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1708797746637, "stop": 1708797756655}], "attachments": [{"source": "49291e7b-e016-439d-90ff-a04f2ade2378-attachment.png", "type": "image/png"}, {"source": "5f4fee94-573d-4677-b0a8-8905c92e4fd4-attachment.png", "type": "image/png"}], "start": 1708797743141, "stop": 1708797756657, "uuid": "b439eb90-85b8-486b-8054-b695f1bd6657", "historyId": "1c241c55a179e1d1662c6ed9ab64c283", "testCaseId": "1c241c55a179e1d1662c6ed9ab64c283", "fullName": "test_cases.test_electron.TestElectron#test_filter_to_completed_tasks", "labels": [{"name": "tag", "value": "run_this"}, {"name": "tag", "value": "@pytest.mark.usefixtures('init_electron_driver')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_electron"}, {"name": "subSuite", "value": "TestElectron"}, {"name": "host", "value": "DESKTOP-TNCSURL"}, {"name": "thread", "value": "15104-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_electron"}]}