{"name": "Test01: Login to grafana via DB", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [WinError 2] The system cannot find the file specified", "trace": "request = <SubRequest 'init_web_driver' for <Function test_verify_login_db>>\n\n    @pytest.fixture(scope=\"class\")\n    def init_web_driver(request):\n>       process = subprocess.Popen(get_data('GrafanaPath'))       # Starting Grafana server without jenkins\n\nconftest.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nC:\\Program Files\\Python311\\Lib\\subprocess.py:1024: in __init__\n    self._execute_child(args, executable, preexec_fn, close_fds,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Popen: returncode: None args: 'C:\\\\\\\\Automation\\\\\\\\grafana-enterprise-9.3.2...>\nargs = 'C:\\\\\\\\Automation\\\\\\\\grafana-enterprise-9.3.2.windows-amd64\\\\\\\\grafana-9.3.2\\\\\\\\bin\\\\\\\\grafana-server.exe --homepath=C:\\\\\\\\Automation\\\\\\\\grafana-enterprise-9.3.2.windows-amd64\\\\\\\\grafana-9.3.2'\nexecutable = None, preexec_fn = None, close_fds = True, pass_fds = (), cwd = None, env = None\nstartupinfo = <subprocess.STARTUPINFO object at 0x000001FBE9586390>, creationflags = 0, shell = False, p2cread = -1\np2cwrite = -1, c2pread = -1, c2pwrite = -1, errread = -1, errwrite = -1, unused_restore_signals = True\nunused_gid = None, unused_gids = None, unused_uid = None, unused_umask = -1, unused_start_new_session = False\nunused_process_group = -1\n\n    def _execute_child(self, args, executable, preexec_fn, close_fds,\n                       pass_fds, cwd, env,\n                       startupinfo, creationflags, shell,\n                       p2cread, p2cwrite,\n                       c2pread, c2pwrite,\n                       errread, errwrite,\n                       unused_restore_signals,\n                       unused_gid, unused_gids, unused_uid,\n                       unused_umask,\n                       unused_start_new_session, unused_process_group):\n        \"\"\"Execute program (MS Windows version)\"\"\"\n    \n        assert not pass_fds, \"pass_fds not supported on Windows.\"\n    \n        if isinstance(args, str):\n            pass\n        elif isinstance(args, bytes):\n            if shell:\n                raise TypeError('bytes args is not allowed on Windows')\n            args = list2cmdline([args])\n        elif isinstance(args, os.PathLike):\n            if shell:\n                raise TypeError('path-like args is not allowed when '\n                                'shell is true')\n            args = list2cmdline([args])\n        else:\n            args = list2cmdline(args)\n    \n        if executable is not None:\n            executable = os.fsdecode(executable)\n    \n        # Process startup details\n        if startupinfo is None:\n            startupinfo = STARTUPINFO()\n        else:\n            # bpo-34044: Copy STARTUPINFO since it is modified above,\n            # so the caller can reuse it multiple times.\n            startupinfo = startupinfo.copy()\n    \n        use_std_handles = -1 not in (p2cread, c2pwrite, errwrite)\n        if use_std_handles:\n            startupinfo.dwFlags |= _winapi.STARTF_USESTDHANDLES\n            startupinfo.hStdInput = p2cread\n            startupinfo.hStdOutput = c2pwrite\n            startupinfo.hStdError = errwrite\n    \n        attribute_list = startupinfo.lpAttributeList\n        have_handle_list = bool(attribute_list and\n                                \"handle_list\" in attribute_list and\n                                attribute_list[\"handle_list\"])\n    \n        # If we were given an handle_list or need to create one\n        if have_handle_list or (use_std_handles and close_fds):\n            if attribute_list is None:\n                attribute_list = startupinfo.lpAttributeList = {}\n            handle_list = attribute_list[\"handle_list\"] = \\\n                list(attribute_list.get(\"handle_list\", []))\n    \n            if use_std_handles:\n                handle_list += [int(p2cread), int(c2pwrite), int(errwrite)]\n    \n            handle_list[:] = self._filter_handle_list(handle_list)\n    \n            if handle_list:\n                if not close_fds:\n                    warnings.warn(\"startupinfo.lpAttributeList['handle_list'] \"\n                                  \"overriding close_fds\", RuntimeWarning)\n    \n                # When using the handle_list we always request to inherit\n                # handles but the only handles that will be inherited are\n                # the ones in the handle_list\n                close_fds = False\n    \n        if shell:\n            startupinfo.dwFlags |= _winapi.STARTF_USESHOWWINDOW\n            startupinfo.wShowWindow = _winapi.SW_HIDE\n            comspec = os.environ.get(\"COMSPEC\", \"cmd.exe\")\n            args = '{} /c \"{}\"'.format (comspec, args)\n    \n        if cwd is not None:\n            cwd = os.fsdecode(cwd)\n    \n        sys.audit(\"subprocess.Popen\", executable, args, cwd, env)\n    \n        # Start the process\n        try:\n>           hp, ht, pid, tid = _winapi.CreateProcess(executable, args,\n                                     # no special security\n                                     None, None,\n                                     int(not close_fds),\n                                     creationflags,\n                                     env,\n                                     cwd,\n                                     startupinfo)\nE                                    FileNotFoundError: [WinError 2] The system cannot find the file specified\n\nC:\\Program Files\\Python311\\Lib\\subprocess.py:1493: FileNotFoundError"}, "description": "This test verify login using elements taking from DB", "start": 1683058515698, "stop": 1683058515698, "uuid": "bfb92ea3-2b8f-4dcd-bd56-bd9157abce4b", "historyId": "cb4f7eb449700d3788ad0977123b76ab", "testCaseId": "f6507f6075cf19d536a0c321de8a35f5", "fullName": "test_cases.test_web_db.TestWebDB#test_verify_login_db", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('init_web_driver', 'init_db_connector')"}, {"name": "parentSuite", "value": "test_cases"}, {"name": "suite", "value": "test_web_db"}, {"name": "subSuite", "value": "TestWebDB"}, {"name": "host", "value": "DESKTOP-TNCSURL"}, {"name": "thread", "value": "52064-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_cases.test_web_db"}]}